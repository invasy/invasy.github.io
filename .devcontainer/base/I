#!/usr/bin/env bash
set -euo pipefail
shopt -qs lastpipe

declare -ar CURL=(
  curl
  --fail
  --location
  --show-error
  --silent
)

RED=$'\e[1;31m' SGR0=$'\e[m'
if [[ ${NO_COLOR:-} ]]; then
  RED='' SGR0=''
fi

die() {
  local -i code=1
  if [[ $1 =~ ^[0-9]+$ ]]; then
    code="$1"; shift
  fi

  local fmt="${1:?}"; shift || :

  # shellcheck disable=SC2059
  printf "${RED}error${SGR0}: ${fmt}\n" "$@" >&2

  exit "$code"
}

create_user() {
  local username="${1:?add user: missing username}"
  local OPT OPTARG password comment="${username@u}"
  local -i OPTIND OPTERR=0

  while getopts ':c:p:' OPT; do
    # shellcheck disable=SC2220
    case $OPT in
      p) password="$OPTARG" ;;
      c) comment="$OPTARG" ;;
    esac
  done; shift $(( OPTIND - 1 ))

  useradd --create-home --comment="$comment" --user-group "$username"
  if [[ ${password:-} ]]; then
    set_password "$username" "$password"
  fi
}

set_password() {
  local username="${1:?set password: missing username}"
  local password="${2:-$username}"

  yes "$password" | passwd -q "$username" || :
}

add_apt_key() {
  local filename="${1:?add key: missing key filename}"
  local url="${2:?add key: missing key URL}"
  local key="$APT_KEYRINGS/$filename.gpg"

  sudo install -m 0755 -d "$APT_KEYRINGS"
  "${CURL[@]}" "$url" | gpg --dearmor -o "$key"
  sudo chmod a+r "$key"

  echo "$key"
}

add_source_list() {
  local filename="${1:?add source-list: missing source list filename}"; shift
  local OPT OPTARG key
  local -i OPTIND=1 OPTERR=0
  local -a options=("arch=$(dpkg --print-architecture)")

  while getopts ':k:o:' OPT; do
    # shellcheck disable=SC2220
    case $OPT in
      k) options+=("signed-by=$(add_apt_key "$filename" "$key")") ;;
      o) options+=("$OPTARG") ;;
    esac
  done; shift $(( OPTIND - 1 ))

  local url="${1:?}" distribution="${2:?}" line='deb '; shift 2
  local -a components=("$@")

  if (( ${#options[*]} > 0 )); then
    line+="[${options[*]}] "
  fi
  line+="$url $distribution"
  if (( ${#components[*]} > 0 )); then
    line+=" ${components[*]}"
  fi

  echo "$line" > "/etc/apt/sources.list.d/$filename.list"
}

install_packages() {
  local OPT OPTARG
  local -i OPTIND OPTERR=0 update=1 upgrade=0
  export DEBIAN_FRONTEND='noninteractive'

  case ${1:-} in
    updated) update=1; shift ;;
    upgraded) update=1 upgrade=1; shift ;;
  esac

  # Update and upgrade if needed
  if (( update )); then
    apt-get -q update
  fi
  if (( upgrade )); then
    apt-get -qy upgrade
  fi
  # Install packages
  apt-get -qy install --no-install-recommends "$@"

  # Clean up
  rm -rf /var/lib/apt/lists/*
}

fetch() {
  local url="${1:?fetch: missing URL}"; shift
  local dir='' filename=''

  while (( $# )); do
    case $1 in
      as) filename="${2:?fetch: missing filename}" ;;
      to) dir="${2:?fetch: missing path}" ;;
    esac; shift 2
  done

  local -a args=()
  if [[ $filename ]]; then
    args+=(--output "$filename")
  elif [[ $dir ]]; then
    args+=(--output-dir "$dir" --remote-name)
  fi

  "${CURL[@]}" "${args[@]}" "$url"
}

fetch_github_release() {
  local repo="${1:?fetch release: missing repository name}"
  local version="${2:?fetch release: missing version}"
  local pattern="${3:?fetch release: missing asset filename pattern}"
  local tag_format="${4:-v%s}"

  if [[ $version != 'latest' ]]; then
    # shellcheck disable=SC2059
    printf -v version "tags/$tag_format" "$version"
  fi

  "${CURL[@]}" "https://api.github.com/repos/$repo/releases/$version" \
  | release.jq --arg pattern "$pattern"
}

extract() {
  local pkg="${1:?extract: missing package name}" dest="${3:-/opt}"
  tar -xf "$pkg" -C "$dest"
}

main() {
  local cmd="${1:-}"; shift || :
  case $cmd in
    add)
      cmd="${1:-}"; shift || :
      case $cmd in
        user) create_user "$@" ;;
        password|passwd|pass|pwd) set_password "$@" ;;
        key) add_apt_key "$@" ;;
        source[_-]list) add_source_list "$@" ;;
        packages|package|pkgs|pkg) install_packages "$@" ;;
        *) die 2 "invalid command 'add %s'" "$cmd"
      esac
      ;;
    set)
      cmd="${1:-}"; shift || :
      case $cmd in
        password|passwd|pass|pwd) set_password "$@" ;;
        *) die 2 "invalid command 'set %s'" "$cmd"
      esac
      ;;
    download|fetch|get)
      case ${1:?} in
        release) shift; fetch_github_release "$@" ;;
        *) fetch "$@"
      esac ;;
    extract) extract "$@" ;;
    die) die "$@" ;;
    '') echo "${RED}love you${SGR0}" ;;
    *) die 1 "invalid command '%s'" "$cmd"
  esac
}

if [[ ! -f /etc/debian_version ]]; then
  die 8 "this script can be run in Debian-based distros only"
fi

main "$@"
